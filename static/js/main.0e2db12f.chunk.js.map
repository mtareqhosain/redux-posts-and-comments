{"version":3,"sources":["App.js","store/actions/posts.js","store/actions/comments.js","serviceWorker.js","store/reducers/posts.js","store/reducers/comments.js","store/reducers/index.js","store/index.js","index.js"],"names":["App","findPost","postId","c","props","comments","filter","check","setState","showComments","state","editPost","postItem","console","log","toggle","inputText","title","id","deletePost","onDeletePost","length","updatePost","onUpdatePost","this","onFetchPost","onFetchComment","className","style","float","width","posts","map","item","display","flexDirection","justifyContent","alignItems","onClick","boxShadow","type","value","onChange","e","target","body","Component","connect","ownProps","postReducer","commentReducer","dispatch","a","fetch","then","res","json","results","catch","input","update","Boolean","window","location","hostname","match","initState","action","index","findIndex","rootReducer","combineReducers","store","createStore","applyMiddleware","reduxThunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0e2db12f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPost, fetchComment, deletePost, updatePost } from './store/actions/';\nimport './App.css';\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            showComments: false,\n            comments: [],\n            toggle: false,\n            inputText: '',\n            postId: null,\n        };\n    }\n    componentDidMount() {\n        this.props.onFetchPost();\n        this.props.onFetchComment();\n    }\n\n\n    findPost = (postId) => {\n        let c = this.props.comments.filter((check) => check.postId === postId);\n        //console.log(c);\n        this.setState({\n            showComments: !this.state.showComments,\n            comments: c,\n        });\n    };\n\n    editPost = (postItem) => {\n        console.log('update: ', postItem);\n        this.setState({\n            toggle: !this.state.toggle,\n            inputText: postItem.title,\n            postId: postItem.id,\n        });\n    };\n\n    deletePost = (postId) => {\n        this.props.onDeletePost(postId);\n        if (this.state.showComments === true && this.state.comments.length !== 0) {\n            this.setState({\n                comments: [],\n                showComments: !this.state.showComments\n            })}    \n    };\n\n    updatePost = (postId) => {\n        this.props.onUpdatePost(postId, this.state.inputText);\n    };\n\n    render() {\n\n        return (\n            <div className='container'>\n                <div style={{ float: 'left', width: '65%' }}>\n                    <h1>POSTS</h1>\n                    {this.props.posts.length > 0 &&\n                        this.props.posts\n                            .filter((check) => check.id <= 10)\n                            .map((item) => {\n                                return (\n                                    <div className={'postCard'}>\n                                        <h2>{item.title}</h2>\n                                        <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center' }}>\n                                            <button className={`btnComment comment`} onClick={() => this.findPost(item.id)}>\n                                                Comments\n                                            </button>\n                                            <button className={`btnEdit edit`} onClick={() => this.editPost(item)}>\n                                                Edit\n                                            </button>\n                                            <button className={`btnDelete delete`} onClick={() => this.deletePost(item.id)}>\n                                                Delete\n                                            </button>\n                                        </div>\n\n                                        {this.state.toggle === true && this.state.postId === item.id && (\n                                            <div className={`update-wrapper cf`}>\n                                                <input\n                                                    style={{ boxShadow: 'none' }}\n                                                    type='text'\n                                                    value={this.state.inputText}\n                                                    onChange={(e) =>\n                                                        this.setState({\n                                                            inputText: e.target.value,\n                                                        })\n                                                    }\n                                                />\n                                                <button onClick={() => this.updatePost(item.id)}>Update</button>\n                                            </div>\n                                        )}\n                                    </div>\n                                );\n                            })}\n                </div>\n                <div style={{ float: 'right', width: '35%' }}>\n                \n                    {this.state.showComments === true && (\n                        <div>\n                            <h1>COMMENTS</h1>\n                            {this.state.comments.map((item) => {\n                                return (\n                                    <ul className={`list`}>\n                                        <li>{item.body}</li>\n                                    </ul>\n                                );\n                            })}\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    console.log('state: ', state);\n    return {\n        posts: state.postReducer.posts,\n        comments: state.commentReducer.comments,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onFetchPost: () => dispatch(fetchPost()),\n        onFetchComment: () => dispatch(fetchComment()),\n        onDeletePost: (id) => dispatch(deletePost(id)),\n        onUpdatePost: (id, input) => dispatch(updatePost(id, input)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const fetchPost = () => {\r\n    return async (dispatch) => {\r\n        fetch('https://jsonplaceholder.typicode.com/posts')\r\n            .then((res) => res.json())\r\n            .then((results) => {\r\n                console.log('posts', results);\r\n                dispatch({\r\n                    type: 'FETCH_POSTS',\r\n                    posts: results,\r\n                });\r\n            })\r\n            .catch((e) => {\r\n                console.log(e);\r\n            });\r\n    };\r\n};\r\n\r\nexport const deletePost = (id) => {\r\n    return async (dispatch) => {\r\n                dispatch({\r\n                    type: 'DELETE_POST',\r\n                    id: id,\r\n                });\r\n        //console.log('post id: ', id)\r\n        \r\n    };\r\n};\r\n\r\nexport const updatePost = (id, input) => {\r\n    return async (dispatch) => {\r\n                dispatch({\r\n                    type: 'UPDATE_POST',\r\n                    update: {id: id, title: input}\r\n                });\r\n        console.log('updates: ', id, input)\r\n        \r\n    };\r\n};\r\n","export const fetchComment = () => {\r\n    return async (dispatch) => {\r\n        fetch('https://jsonplaceholder.typicode.com/comments')\r\n            .then((res) => res.json())\r\n            .then((results) => {\r\n                console.log('comments: ', results);\r\n                dispatch({\r\n                    type: 'FETCH_COMMENTS',\r\n                    comments: results,\r\n                });\r\n            })\r\n            .catch((e) => {\r\n                console.log(e);\r\n            });\r\n    };\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\r\n    posts: []\r\n}\r\n\r\nconst postReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_POSTS':\r\n            return {\r\n                ...state,\r\n                posts: action.posts\r\n            }\r\n            case 'DELETE_POST':\r\n                return {\r\n                    ...state,\r\n                    posts: state.posts.filter(check => check.id !==action.id)\r\n            }\r\n        case 'UPDATE_POST':\r\n            {   const posts = [...state.posts];\r\n                const index = posts.findIndex(posts => posts.id === action.update.id);\r\n                if (index !== -1) {\r\n                    posts[index] = {\r\n                        ...posts[index],\r\n                        ...action.update\r\n                    };\r\n                }\r\n                return {\r\n                ...state,\r\n                posts: posts\r\n            }}\r\n                \r\n            \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default postReducer;","const initState = {\r\n    comments: []\r\n}\r\n\r\nconst commentReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_COMMENTS':\r\n            return {\r\n                ...state,\r\n                comments: action.comments\r\n            }\r\n            \r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default commentReducer;","import { combineReducers } from 'redux';\r\nimport postReducer from './posts';\r\nimport commentReducer from './comments'\r\n\r\nconst rootReducer = combineReducers({\r\n    postReducer: postReducer,\r\n    commentReducer: commentReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import reduxThunk from 'redux-thunk';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from './reducers/';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(reduxThunk));\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store = {store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}